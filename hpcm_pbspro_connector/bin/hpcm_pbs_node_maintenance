#!/bin/sh
#
# Copyright (C) 1994-2020 Altair Engineering, Inc.
# For more information, contact Altair at www.altair.com.
#
# This file is part of the PBS Professional ("PBS Pro") software.
#
# Open Source License Information:
#
# PBS Pro is free software. You can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# PBS Pro is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.
# See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Commercial License Information:
#
# For a copy of the commercial license terms and conditions,
# go to: (http://www.pbspro.com/UserArea/agreement.html)
# or contact the Altair Legal Department.
#
# Altair’s dual-license business model allows companies, individuals, and
# organizations to create proprietary derivative works of PBS Pro and
# distribute them - whether embedded or bundled with other software -
# under a commercial license agreement.
#
# Use of Altair’s trademarks, including but not limited to "PBS™",
# "PBS Professional®", and "PBS Pro™" and Altair’s logos is subject to Altair's
# trademark licensing policies.
#

# Assumption:
# This wrapper script assumes
#  1) PBS Server/Scheduler is running on the HPCM Management Node.
#  2) Script is executed on the HPCM Management Node.

# Purpose:
# This wrapper script is used for putting node(s) into production or
# moving nodes into maintenance _and_ setting the flag (external to PBS)
# that the node was taken offline deliberately.
# Otherwise, the node monitor may assume a node is in need of repair and
# automatically bring it back online.

# Source in PBS specific environment variables from pbs.conf
if [ -f /etc/pbs.conf ]; then
    . /etc/pbs.conf
else
    echo "Unable to find /etc/pbs.conf"
    exit 1
fi

# Define CMU_PATH
CMU_PATH=/opt/clmgr/bin

# Simple Usage statement
Usage() {
    cat <<EOF
Usage: `basename $0` action nodelist

action can be either maintenance or production

nodelist can be a space-separated list or a file

EOF
    exit 0
}

while getopts hu opt; do
    case $opt in
        h|u) Usage ;;
    esac
done

# Now script takes an action argument, so separate it out from objects
arg1=$1
shift

# Setting up the variables in the order we are assuming they are passed in.
nodelist=$*    # if used w/ HPCM, this will be associated to CMU_TEMP_NODE_FILE

# Check to see if the nodes are provided as a file or a space-separated list of
# nodes names
if [ -f "$nodelist" ] ; then
    cmd=`cat $nodelist`
else
    cmd="$nodelist"
fi

# Verify that the special admin PBS queue and HPCM custom_group called
# "nodes_maintenance" is created so that we can move the node(s) into this queue.
# This will ensure that if the node marked online for admin testing, the
# node will not accept work from the users.

# If the queue is NOT created, we will automatically create it before operating
# on the node(s).
queue_ans=`$PBS_EXEC/bin/qstat -q nodes_maint 2>/dev/null`
if [ -z "$queue_ans" ]; then
    $PBS_EXEC/bin/qmgr -c "create queue nodes_maint queue_type = execution"
    $PBS_EXEC/bin/qmgr -c "set queue nodes_maint acl_users=root@*"
    $PBS_EXEC/bin/qmgr -c "set queue nodes_maint enabled=true"
    $PBS_EXEC/bin/qmgr -c "set queue nodes_maint started=true"
fi

# If the custom_group is NOT created, we will automatically create it before operating
# on the node(s).
usergroup_ans=`$CMU_PATH/cmu_show_custom_groups | grep nodes_maintenance 2>/dev/null`
if [ -z "$usergroup_ans" ]; then
    $CMU_PATH/cmu_add_custom_group nodes_maintenance
fi

# Pushing the nodelist through a for-loop to
for node in $cmd ; do
    # Quick check to see if the node even exists in PBS
    node_ans=`$PBS_EXEC/bin/pbsnodes $node 2>/dev/null`

    # If node does exist proceed with online/offline logic
    # If node does _not_ exist then echo simple error message
    if [ -n "$node_ans" ]; then
        case $arg1 in
            *maintenance)   $PBS_EXEC/bin/pbsnodes -o ${node}
                            $PBS_EXEC/bin/qmgr -c "set node ${node} comment += \"HPCM Administrator put node into maintenance mode (`date +%m/%d/%y`)\""
                            $PBS_EXEC/bin/qmgr -c "set node ${node} queue = nodes_maint"
                            $CMU_PATH/cmu_add_to_custom_group -t nodes_offline ${node} 2>/dev/null
                            $CMU_PATH/cmu_add_to_custom_group -t nodes_maintenance ${node} 2>/dev/null ;;
            *production)    $PBS_EXEC/bin/pbsnodes -o ${node}
                            $PBS_EXEC/bin/qmgr -c "unset node ${node} comment"
                            $PBS_EXEC/bin/qmgr -c "unset node ${node} queue"
                            $PBS_EXEC/bin/qmgr -c "set node ${node} comment += \"HPCM Administrator put node into production, but node is offline (`date +%m/%d/%y`)\""
                            $CMU_PATH/cmu_del_from_custom_group -t nodes_maintenance ${node} 2>/dev/null ;;
        esac
    else
        echo "Node: $node,  Error: Unknown node"
    fi
done
