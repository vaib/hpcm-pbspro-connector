#!/bin/bash
#
# Copyright (C) 1994-2020 Altair Engineering, Inc.
# For more information, contact Altair at www.altair.com.
#
# This file is part of the PBS Professional ("PBS Pro") software.
#
# Open Source License Information:
#
# PBS Pro is free software. You can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# PBS Pro is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.
# See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Commercial License Information:
#
# For a copy of the commercial license terms and conditions,
# go to: (http://www.pbspro.com/UserArea/agreement.html)
# or contact the Altair Legal Department.
#
# Altair’s dual-license business model allows companies, individuals, and
# organizations to create proprietary derivative works of PBS Pro and
# distribute them - whether embedded or bundled with other software -
# under a commercial license agreement.
#
# Use of Altair’s trademarks, including but not limited to "PBS™",
# "PBS Professional®", and "PBS Pro™" and Altair’s logos is subject to Altair's
# trademark licensing policies.
#

# Assumption:
# This wrapper script assumes
#  1) PBS Server/Scheduler is running on the HPCM Management Node.
#  2) Script is executed on the HPCM Management Node.

# Purpose:

# Source in PBS specific environment variables from pbs.conf
if [ -f /etc/pbs.conf ]; then
   . /etc/pbs.conf
else
   echo "Unable to find /etc/pbs.conf"
   exit 1
fi

# Define CMU_PATH
CMU_PATH=/opt/clmgr/bin

# Simple Usage statement
Usage() {
         cat <<EOF
Usage: `basename $0`

EOF
    exit 0
}

while getopts h opt; do
    case $opt in
        h) Usage ;;
    esac
done

if [ -n "$PBS_PRIMARY" ]; then
    ping -c 3 $PBS_PRIMARY > /dev/null 2>&1
    if [ $? -eq 0 ]; then
       echo $PBS_PRIMARY
       exit 0
    fi
    ping -c 3 $PBS_SECONDARY > /dev/null 2>&1
    if [ $? -eq 0 ]; then
       echo $PBS_SECONDARY
       exit 0
    fi
else
    echo $PBS_SERVER
    exit 0
fi

echo "undefined"

