#!/bin/sh
#
# Copyright (C) 1994-2020 Altair Engineering, Inc.
# For more information, contact Altair at www.altair.com.
#
# This file is part of the PBS Professional ("PBS Pro") software.
#
# Open Source License Information:
#
# PBS Pro is free software. You can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# PBS Pro is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.
# See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Commercial License Information:
#
# For a copy of the commercial license terms and conditions,
# go to: (http://www.pbspro.com/UserArea/agreement.html)
# or contact the Altair Legal Department.
#
# Altair’s dual-license business model allows companies, individuals, and
# organizations to create proprietary derivative works of PBS Pro and
# distribute them - whether embedded or bundled with other software -
# under a commercial license agreement.
#
# Use of Altair’s trademarks, including but not limited to "PBS™",
# "PBS Professional®", and "PBS Pro™" and Altair’s logos is subject to Altair's
# trademark licensing policies.
#

# Assumption:
# This wrapper script assumes
#  1) PBS Server/Scheduler is running on the CMU Management Node, which 
#     maybe be on the same host OR on the HPE SGI Admin node (defined
#     by PBS_SERVER.
#  2) Script is executed on the CMU Management Node.

# Purpose:
# This wrapper script is used to start or stop the PBS Server/Scheduler
# daemon on the CMU Management node.

# Source in PBS specific environment variables from pbs.conf
if [ -f /etc/pbs.conf ]; then
    . /etc/pbs.conf
else
    echo "Unable to find /etc/pbs.conf"
    exit 1
fi

# Define CMU_PATH
CMU_PATH=/opt/cmu/bin

# Simple Usage statement
Usage() {
    cat <<EOF
Usage: `basename $0` action [server]

action can be start, stop or restart

server can be primary or secondary. If not provided, non HA configuration is assumed.

EOF
    exit 0
}

while getopts c:hu opt; do
    case $opt in
        h|u) Usage ;;
    esac
done

node=`hostname`

# If its HA configuration or non HA
# If node is PBS_SERVER proceed with case statement logic
# If node is _not_ the PBS_SERVER then check which server to proceed with
if [ -n "$2" ]; then
    if [ "$2" == "primary" ]; then
        if [ "${node}" == "${PBS_SERVER}" ]; then
            case $1 in
                *stop)       systemctl stop pbs;;
                *restart)    systemctl restart pbs;;
                *start)      systemctl start pbs;;
            esac
        else
            case $1 in
                *stop)       echo "Stopping Primary PBS Server/Scheduler on ${PBS_PRIMARY}"
                             ssh ${PBS_PRIMARY} systemctl stop pbs;;
                *restart)    echo "Restart Primary PBS Server/Scheduler on ${PBS_PRIMARY}"
                             ssh ${PBS_PRIMARY} systemctl restart pbs;;
                *start)      echo "Starting Primary PBS Server/Scheduler on ${PBS_PRIMARY}"
                             ssh ${PBS_PRIMARY} systemctl start pbs;;
            esac
	fi
    fi

    if [ "$2" == "secondary" ]; then
        # Assuming that secondary will NOT be installed on admin node but can be handled if done so
        case $1 in
            *stop)       echo "Stopping Secondary PBS Server/Scheduler on ${PBS_SECONDARY}"
                         ssh ${PBS_SECONDARY} systemctl stop pbs;;
            *restart)    echo "Restart Secondary PBS Server/Scheduler on ${PBS_SECONDARY}"
                         ssh ${PBS_SECONDARY} systemctl restart pbs;;
            *start)      echo "Starting Secondary PBS Server/Scheduler on ${PBS_SECONDARY}"
                         ssh ${PBS_SECONDARY} systemctl start pbs;;
        esac
    fi
else
    if [ "${node}" == "${PBS_SERVER}" ]; then
        case $1 in
            *stop)       systemctl stop pbs;;
            *restart)    systemctl restart pbs;;
            *start)      systemctl start pbs;;
        esac
    else
        case $1 in
            *stop)       echo "Stopping PBS Server/Scheduler on ${PBS_SERVER}"
                         ssh ${PBS_SERVER} systemctl stop pbs;;
            *restart)    echo "Restart PBS Server/Scheduler on ${PBS_SERVER}"
                         ssh ${PBS_SERVER} systemctl restart pbs;;
            *start)      echo "Starting PBS Server/Scheduler on ${PBS_SERVER}"
                         ssh ${PBS_SERVER} systemctl start pbs;;
        esac
    fi
fi
