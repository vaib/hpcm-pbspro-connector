#!/bin/sh
#
# Copyright (C) 1994-2020 Altair Engineering, Inc.
# For more information, contact Altair at www.altair.com.
#
# This file is part of the PBS Professional ("PBS Pro") software.
#
# Open Source License Information:
#
# PBS Pro is free software. You can redistribute it and/or modify it under the
# terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# PBS Pro is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.
# See the GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Commercial License Information:
#
# For a copy of the commercial license terms and conditions,
# go to: (http://www.pbspro.com/UserArea/agreement.html)
# or contact the Altair Legal Department.
#
# Altair’s dual-license business model allows companies, individuals, and
# organizations to create proprietary derivative works of PBS Pro and
# distribute them - whether embedded or bundled with other software -
# under a commercial license agreement.
#
# Use of Altair’s trademarks, including but not limited to "PBS™",
# "PBS Professional®", and "PBS Pro™" and Altair’s logos is subject to Altair's
# trademark licensing policies.
#

# Assumption:
# This wrapper script assumes
#  1) PBS Server/Scheduler is running on the HPCM Management Node.
#  2) Script is executed on the HPCM Management Node.

# Purpose:
# This wrapper script is used for enabling or disabling OS provisioning
# within PBS Professional on a list of nodes.

# Source in PBS specific environment variables from pbs.conf
if [ -f /etc/pbs.conf ]; then
   . /etc/pbs.conf
else
    echo "Unable to find /etc/pbs.conf"
    exit 1
fi
# Test
# Simple Usage statement
Usage() {
    cat <<EOF
Usage: `basename $0` action nodelist

action can be either enable or disable

nodelist can be a space-separated list or a file

EOF
    exit 0
}

while getopts hu opt; do
    case $opt in
        h|u) Usage ;;
    esac
done

# Now script takes an action argument, so separate it out from objects
arg1=$1
shift

# Setting up the variables in the order we are assuming they are passed in.
nodelist=$@    # if used w/ HPCM, this will be associated to CMU_TEMP_NODE_FILE

# Check to see if the nodes are provided as a file or a space-separated list of
# nodes names
if [ -f "$nodelist" ] ; then
    cmd=`cat $nodelist`
else
    cmd="$nodelist"
fi

# Verify that the CMU provisioning hook is installed, otherwise we will create this
# automatically or the administrator. We will check every time - just to be sure.
echo "Verifying CMU provision hook is configured in PBS Professional."
echo "Checking cmu_provision_hook exists..."
chk_prov_hook=`${PBS_EXEC}/bin/qmgr -c "print hook cmu_provision" 2>/dev/null`
if [[ -n "${chk_prov_hook}" ]] ; then
    echo "cmu_provision hook EXISTS!"
else
    echo "Creating cmu_provision hook..."
    ${PBS_EXEC}/bin/qmgr -c "create hook cmu_provision event = provision"
    ${PBS_EXEC}/bin/qmgr -c "import hook cmu_provision application/x-python default /opt/clmgr/contrib/hpcm_pbspro_connector/bin/hpcm_pbs_os_provision_hook.py"
    ${PBS_EXEC}/bin/qmgr -c "import hook cmu_provision application/x-config default /opt/clmgr/contrib/hpcm_pbspro_connector/etc/hpcm_pbs_os_provision_hook.json"
    echo "....... DONE"
fi

# Pushing the nodelist through a for-loop to
for node in $cmd ; do
    # Quick check to see if the node even exists in PBS
    node_ans=`$PBS_EXEC/bin/pbsnodes $node 2>/dev/null`

    # If node does exist proceed with enable/disable logic
    # If node does _not_ exist then echo simple error message
    if [ -n "$node_ans" ]; then
        case $arg1 in
            *enable)    $PBS_EXEC/bin/qmgr -c "set node ${node} provision_enable=true";;
            *disable)   $PBS_EXEC/bin/qmgr -c "set node ${node} provision_enable=false";;
        esac
    else
        echo "Node: $node,  Error: Unknown node"
    fi
done
